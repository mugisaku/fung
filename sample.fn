


integer  number(255)
integer  age(17)

string  s("yogult:")

list  ls("first",number,age)


function
isbdigit(integer  c)->boolean
{
  return((c == '0') ||
         (c == '1'));
}


function
isodigit(integer  c)->boolean
{
  return((c >= '0') &&
         (c <= '7'));
}


function
isdigit(integer  c)->boolean
{
  return((c >= '0') &&
         (c <= '9'));
}


function
isxdigit(integer  c)->boolean
{
  return((              isdigit(c)) ||
         ((c >= 'a') && (c <= 'f')) ||
         ((c >= 'A') && (c <= 'F')));
}


function
isalpha(integer  c)->boolean
{
  return(((c >= 'a') && (c <= 'z')) ||
         ((c >= 'A') && (c <= 'Z')));
}


function
isalnum(integer  c)->boolean
{
  return(isdigit(c) || isalpha(c));
}


function
isident0(integer  c)->boolean
{
  return(isalpha(c) || (c == '_'));
}


function
isidentn(integer  c)->boolean
{
  return(isalnum(c) || (c == '_'));
}


function
read_identifier(pointer  p, string  s)->list
{
  return isidentn(*p)? read_identifier(p+1,s+*p):list(p,s);
}


function
isspace(integer  c)->boolean
{
  return((c ==  ' ') ||
         (c == '\t') ||
         (c == '\r') ||
         (c == '\n'));
}


function
skip_spaces(pointer  p)->pointer
{
  return isspace(*p)? skip_spaces(p+1):p;
}


function
read_token(pointer  p, list  buffer)->list
{
  let  skiped_p = skip_spaces(p);

  let  c = *skiped_p;

  return (c == 0)?
         {
           return buffer;
         }

      :isident0(c)?
        {
          let  res = read_identifier(skiped_p,"");

          print res;
          print res[0];

          return read_token(res[0],buffer+res[1]);
        }

      :
        {
          return read_token(p+1,buffer+c);
        }
      ;
}


function
main(string  s)->list
{
  return read_token(s.pointer,list());
}




