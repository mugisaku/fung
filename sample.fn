


integer  number(255)
integer  age(17)

string  s("yogult:")

list  ls("first",number,age)


function
isbdigit(integer  c)->boolean
{
  return((c == '0') ||
         (c == '1'));
}


function
isodigit(integer  c)->boolean
{
  return((c >= '0') &&
         (c <= '7'));
}


function
isdigit(integer  c)->boolean
{
  return((c >= '0') &&
         (c <= '9'));
}


function
isxdigit(integer  c)->boolean
{
  return((              isdigit(c)) ||
         ((c >= 'a') && (c <= 'f')) ||
         ((c >= 'A') && (c <= 'F')));
}


function
ctox(character  c)->integer
{
  return isdigit(c)? c-'0'
         :((c == 'a') || (c == 'A'))? 10
         :((c == 'b') || (c == 'B'))? 11
         :((c == 'c') || (c == 'C'))? 12
         :((c == 'd') || (c == 'D'))? 13
         :((c == 'e') || (c == 'E'))? 14
         :((c == 'f') || (c == 'F'))? 15
         :0;
}


function
isalpha(integer  c)->boolean
{
  return(((c >= 'a') && (c <= 'z')) ||
         ((c >= 'A') && (c <= 'Z')));
}


function
isalnum(integer  c)->boolean
{
  return(isdigit(c) || isalpha(c));
}


function
isident0(integer  c)->boolean
{
  return(isalpha(c) || (c == '_'));
}


function
isidentn(integer  c)->boolean
{
  return(isalnum(c) || (c == '_'));
}


function
read_identifier(pointer  p, string  s)->list
{
  return isidentn(*p)? read_identifier(p+1,s+*p):list(p,s);
}


function
isspace(integer  c)->boolean
{
  return((c ==  ' ') ||
         (c == '\t') ||
         (c == '\r') ||
         (c == '\n'));
}


function
read_binary_number(pointer  p, integer  n)->list
{
  let  c = *p;

  return isbdigit(c)?
         {
           return read_binary_number(p+1,n+((c == '0')? 0:1));
         }

       :list(p,n);
}


function
read_octal_number(pointer  p, integer  n)->list
{
  let  c = *p;

  return isodigit(c)?
         {
           return read_octal_number(p+1,(n<<3)|(c-'0'));
         }

       :list(p,n);
}


function
read_decimal_number(pointer  p, integer  n)->list
{
  let  c = *p;

  return isdigit(c)?
         {
           return read_decimal_number(p+1,(n*10)+(c-'0'));
         }

       :list(p,n);
}


function
read_hexadeicmal_number(pointer  p, integer  n)->list
{
  let  c = *p;

  return isxdigit(c)?
         {
           return read_hexadecimal_number(p+1,(n<<4)|ctox(c));
         }

       :list(p,n);
}


function
read_number_that_begins_by_zero(pointer  p)->list
{
  let  c = *(p+1);

  return ((c == 'x') || (c == 'X'))?
         {
           return read_hexadecimal_number(p+1,0);
         }

       :((c == 'o') || (c == 'O'))?
         {
           return read_octal_number(p+1,0);
         }

       :((c == 'b') || (c == 'B'))?
         {
           return read_binary_number(p+1,0);
         }

       :
         {
           return list(p+1,0);
         }
       ;
}


function
skip_spaces(pointer  p)->pointer
{
  return isspace(*p)? skip_spaces(p+1):p;
}


function
read_token(pointer  p, list  buffer)->list
{
  let  skiped_p = skip_spaces(p);

  let  c = *skiped_p;

  return (c == 0)?
         {
           return list(skiped_p,buffer);
         }

      :isident0(c)?
        {
          let  res = read_identifier(skiped_p,"");

          return list(res[0],buffer+res[1]);
        }

      :(c == '0')?
        {
          let  res = read_number_that_begins_by_zero(skiped_p);

          return list(res[0],buffer+res[1]);
        }

      :(isdigit(c))?
        {
          let  res = read_decimal_number(skiped_p,0);

          return list(res[0],buffer+res[1]);
        }

      :
        {
          return list(skiped_p+1,buffer+c);
        }
      ;
}


function
run_read_token(pointer  p, list  buffer)->list
{
  let      res = read_token(p,buffer);
  let  new_buf = buffer+res[1];

  return *p? run_read_token(res[0],new_buf):new_buf;
}


function
main(string  s)->list
{
  return run_read_token(s.pointer,list());
}




